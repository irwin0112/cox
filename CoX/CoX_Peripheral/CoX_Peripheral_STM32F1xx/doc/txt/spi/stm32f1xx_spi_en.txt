//********************************************************************************
//
//! \defgroup STM32F1xx_SPI STM32F1xx SPI
//!
//! \brief STM32F1xx SPI Peripheral Driver
//!
//! The CoX Peripheral Library also provides APIs for full functions of ST
//! STM32F1xx SPI.This module supports the whole STM32F1xx Series.
//!
//! <br /> 
//! <h1>Contents</h1>
//! - \ref STM32F1xx_SPI_BLOCK
//! - \ref STM32F1xx_SPI_Function_Desc
//! - \ref STM32F1xx_SPI_API_Group
//!   - \ref STM32F1xx_API_Group_Configure_Control
//!   - \ref STM32F1xx_API_Group_Interrupt_Control
//!   - \ref STM32F1xx_API_Group_TransferReceive_Control
//!   .
//! - \ref STM32F1xx_SPI_Usage
//! .
//!
//! <br />
//! \section STM32F1xx_SPI_BLOCK 1. Spi Physical Block
//! <img src="STM32F1xx_spi_block.png" />
//!
//! <br />
//! \section STM32F1xx_SPI_Function_Desc 2. Functional Description
//! The system control block has the following functions:
//! - The interface can be configured as the master and in this case it provides the
//!   communication clock (SCK) to the external slave device. The interface is also 
//!   capable of operating in multimaster configuration.
//! - The serial peripheral interface (SPI) allows half/ full-duplex, synchronous, serial 
//!   communication with external devices. 
//! - Each SPI controller can generate an individual interrupt when data transfer is finished,
//!   and the respective interrupt event flag IF will be set. The interrupt  
//! - It may be used for a variety of purposes, including simplex synchronous transfers on two 
//!   lines with a possible bidirectional data line or reliable communication using CRC checking.
//! .
//!
//! <br />
//! \subsection STM32F1xx_SPI_API_Group 3. API Groups
//!
//! The Spi API is broken into three groups of functions:
//! - those that deal with SPI mode configure,
//! - those that deal with SPI interrupt control,
//! - those that deal with SPI transfer and receive controlling.
//! - those that deal with SPI CRC and DMA.
//! .
//! <br />
//! \subsection STM32F1xx_API_Group_Configure_Control 3.1 SPI configuration control APIs
//!
//! - SPIConfig()
//! - SPISSModeConfig()
//! - SPISSIConfig()
//! - SPISSOutputConfig()
//! .
//!
//! <br />
//! \subsection STM32F1xx_API_Group_Interrupt_Control 3.2 SPI Interrupt Control APIs
//! - SPIIntEnable()
//! - SPIIntCallbackInit()
//! - SPIIntDisable()
//! - SPIIntFlagGet()
//! - SPIIntFlagClear()
//! .
//!
//! <br />
//! \subsection STM32F1xx_API_Group_TransferReceive_Control 3.3 SPI Transfer&Receive Control
//!
//! - SPISingleDataReadWrite()
//! - SPIDataRead()
//! - SPIDataWrite()
//! - SPIDataPut()
//! - SPIDataGet()
//! - SPIDataPutNonBlocking()
//! - SSIDataGetNonBlocking()
//! - SPIIsBusy()
//! - SPIIsRxNotEmpty()
//! - SPIIsTxEmpty()
//! .
//! 
//! <br />
//! \subsection STM32F1xx_API_Group_CRC_DMA_Control 3.4 STM32F1xx API Group CRC DMA Control 
//! 
//! - SPICRCPolSet()
//! - SPICRCPolGet()
//! - SPIRxCRCGet()
//! - SPITXCRCGet()
//! - SPICRCEnble()
//! - SPICRCDisble()
//! - SPIDMAEnable()
//! - SPIDMADisable()
//! . 
//!
//! <br />
//! \section STM32F1xx_SPI_Usage 4 Program Examples
//! The following example shows how to use the SPI APIs to configue SPI and to implement 
//! the function of transferring and receiving. 
//! \code
//! #include "xhw_types.h"
//! #include "xhw_memmap.h"
//! #include "xspi.h"
//! #include "xhw_spi.h"
//! #include "xsysctl.h"
//! #include "xgpio.h"
//! #include "xcore.h"
//!
//! unsigned long ulSourceData[] = {0x01020304, 0x11121314, 0x21212124, 0x31323334,
//!                                 0x41424344, 0x51525354, 0x61626364, 0x71727374, 
//!                                 0x81828384, 0x91929394, 0xA1A2A3A4, 0xB1B2B3B4, 
//!                                 0xC1C2C3C4, 0xD1D2D3D4, 0xE1E2E3E4, 0xF1F2F3F4};
//! unsigned long ulDestData[16];
//! unsigned long i;
//!
//! //*****************************************************************************
//! //
//! // Ininite the SPI case which is needed
//! //
//! // \param None
//! //
//! // This function ininite the SPI including clock source and enable spi 
//! //
//! // \return none
//! //
//! //*****************************************************************************
//! void SpiReceiveTransferInit(void)
//! {
//!     //
//!     // Set SysClk 36MHz using Extern 12M oscillator
//!     //
//!     xSysCtlClockSet(12000000, xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_25MHZ);
//!     //
//!     // Enable Peripheral SPI0
//!     //
//!     SysCtlPeripheralEnable(SYSCTL_PERIPH_SPI1);
//!     
//!     //
//!     // Configure Some GPIO pins as SPI Mode
//!     //
//!     xSPinTypeSPI(SPI1CLK(1), PA5);
//!     xSPinTypeSPI(SPI1MOSI(1), PA7);
//!     xSPinTypeSPI(SPI1MISO(1), PA6);
//!     xSPinTypeSPI(SPI1CS(1), PA4);
//!
//!     xSPIConfigSet(SPI1_BASE, 200000, xSPI_MOTO_FORMAT_MODE_0 | xSPI_DATA_WIDTH8 | 
//!                              xSPI_MSB_FIRST | xSPI_MODE_SLAVE);
//!
//! }
//! //*****************************************************************************
//! //
//! // Spi Master Slave Mode Configure
//! //
//! // \param None
//! //
//! // This function configure the SPI as master and slave mode at the same time
//! // transfer and receive data
//! //
//! // \return None
//! //
//! //*****************************************************************************
//! void SpiSlaveModeConfig(void)
//! {    
//!     for(i = 0; i < 16; i++)
//!     {
//!         ulDestData[i] = xSPISingleDataReadWrite(xSPI1_BASE, ulSourceData[i]);
//!     }    
//! }
//! \endcode
//! \note 
//!
//**********************************************************************************
