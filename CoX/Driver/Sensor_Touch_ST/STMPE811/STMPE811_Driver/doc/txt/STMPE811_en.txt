//*****************************************************************************
//
//! \defgroup STMPE811
//!
//! \brief S-Touch advanced resistive touchscreen controllerwith 8-bit GPIO expander.
//!
//! The STMPE811 is a GPIO (general purpose input/output) port expander able to 
//! interface a main digital ASIC via the two-line bidirectional bus (I2C). 
//! A separate GPIO expander is often used in mobile multimedia platforms 
//! to solve the problems of the limited amount of GPIOs typically available 
//! on the digital engine.
//!
//! The STMPE811 offers great flexibility, as each I/O can be configured as 
//! input, output or specific functions. The device has been designed with 
//! very low quiescent current and includes a wakeup feature for each I/O, 
//! to optimize the power consumption of the device.
//!
//! A 4-wire touchscreen controller is built into the STMPE811. The touchscreen
//! controller is enhanced with a movement tracking algorithm (to avoid excessive 
//! data), a 128 x 32 bit buffer and programmable active window feature.
//!
//! <h1>Contents</h1>
//! - \ref STMPE811_Block
//! - \ref STMPE811_Pins
//! - \ref STMPE811_I2C_MODE
//! .
//!
//! \section STMPE811_Block 1. STMPE811 Block Diagram
//! <img src="STMPE811_Block.png" />
//!
//! \section STMPE811_Pins 2. STMPE811 Pin Description
//! 
//! <img src="STMPE811_pin1.png" />
//!
//! <img src="STMPE811_pin2.png" />
//! 
//! \section STMPE811_I2C_MODE 3. STMPE811 supported I2C mode
//! The STMPE811 interfaces with the host CPU via a I2C or SPI interface. The 
//! pin IN_1 allows the selection of interface protocol at reset state.
//! The addressing scheme of STMPE811 is designed to allow up to 2 devices to 
//! be connected to the same I2C bus.
//! <img src="STMPE811_I2CAddr.png" />
//!
//! For the bus master to communicate to the slave device, the bus master 
//! must initiate a Start condition and be followed by the slave device address. 
//! Accompanying the slave device address, is a read/write bit (R/W). The bit is 
//! set to 1 for read and 0 for write operation. If a match occurs on the slave 
//! device address, the corresponding device gives an acknowledge on the SDA 
//! during the 9th bit time. If there is no match, it deselects itself from the 
//! bus by not responding to the transaction. 
//! .
//!
//! \defgroup STMPE811_Driver  
//!  
//! \brief This is the Driver of STMPE811 with interface of STMPE811.
//!
//! This driver is implemented by using defines and global variables.
//!
//! <h1>Contents</h1>
//! - \ref STMPE811_How_Define
//! - \ref STMPE811_API_Group
//!   - \ref STMPE811_API_Group_Initialization
//!   - \ref STMPE811_API_Group_RW
//!   - \ref STMPE811_API_Group_Interrupt
//!   .
//! - \ref STMPE811_Usage 
//! .
//!
//! \section STMPE811_How_Define 1. How is the STMPE811 Driver implemented?
//! Use define to config some Fixing things,such as I2C base and I2C pins
//!
//! Use global variables to save variables use by the APIs.
//!
//! \section STMPE811_API_Group 2. API Groups
//!
//! The STMPE811 API is broken into two groups of functions: 
//! - those that deal with STMPE811 chip information and init.
//! - those that deal with STMPE811 read and write register . 
//! - those that deal with STMPE911 interrupt.
//! 
//! .
//! <br />
//! \subsection STMPE811_API_Group_Initialization 4.1 STMPE811 initialize
//! I2C initialization are dealed with:
//! - STMPE811Init()
//! - STMPE811InitConfig()
//! - STMPE811SetOperatingMode()
//! .
//!
//! <br />
//! \subsection STMPE811_API_Group_RW 4.2 STMPE811 Read register and Write  
//! data to register are dealed with:
//! - STMPE811Write(),
//! - STMPE811Read().
//! .
//!
//! <br />
//! \subsection STMPE811_API_Group_Interrupt 4.3 STMPE811 interrupt operation
//!  are dealed with:
//! - STMPE811IntCallback()
//! - STMPE811GetINTStatus()
//! - STMPE811INTClear()
//! .
//!
//!
//! \section STMPE811_Usage STMPE811 Usage
//! Step 1, you should select the CoX implment according to the mcu that you select. \n
//! Step 2, you should transplant the driver according to your MCU if you use the I2Cx 
//! port which is different from in the STMPE811 driver. \n
//! Below is some example code:
//!
//! \code
//!//*****************************************************************************
//!//
//!//! \file Example.c
//!//! \brief the STMPE811 Example.
//!//! \version 1.0
//!//! \date 7/13/2012
//!//! \author CooCox
//!//! \copy
//!//!
//!//! Copyright (c)  2011, CooCox 
//!//! All rights reserved.
//!//! 
//!//! Redistribution and use in source and binary forms, with or without 
//!//! modification, are permitted provided that the following conditions 
//!//! are met: 
//!//! 
//!//!     * Redistributions of source code must retain the above copyright 
//!//! notice, this list of conditions and the following disclaimer. 
//!//!     * Redistributions in binary form must reproduce the above copyright
//!//! notice, this list of conditions and the following disclaimer in the
//!//! documentation and/or other materials provided with the distribution. 
//!//!     * Neither the name of the <ORGANIZATION> nor the names of its 
//!//! contributors may be used to endorse or promote products derived 
//!//! from this software without specific prior written permission. 
//!//! 
//!//! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//!//! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
//!//! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//!//! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
//!//! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
//!//! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
//!//! SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//!//! INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
//!//! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
//!//! ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
//!//! THE POSSIBILITY OF SUCH DAMAGE.
//!//*****************************************************************************
//!#include "STMPE811.h"
//!#include "hw_STMPE811.h"
//!#include "HX8347-G.h"
//!#include "hw_HX8347-G.h"
//!#include "xhw_ints.h"
//!#include "xhw_nvic.h"
//!#include "xhw_memmap.h"
//!#include "xhw_types.h"
//!#include "xdebug.h"
//!#include "xcore.h"
//!#include "xsysctl.h"
//!#include "xhw_sysctl.h"
//!#include "xhw_gpio.h"
//!#include "xgpio.h"
//!#include "xhw_uart.h"
//!#include "xuart.h"
//!
//!extern xtBoolean TouchDetect;
//!extern unsigned long ulX, ulY, ulZ;
//!//*****************************************************************************
//!//
//!//! \brief The example of STMPE811.
//!//!
//!//! \param None
//!//!
//!//! \details The example of STMPE811.
//!//! \return None.
//!//
//!//*****************************************************************************
//!void STMPE811Example(void)
//!{
//!    unsigned long ulDeviceID;
//!    unsigned char pucBuffer[2];
//!    unsigned long ulPointX, ulPointY;
//!    
//!    xSysCtlClockSet(72000000, xSYSCTL_OSC_MAIN | SYSCTL_XTAL_25MHZ);
//!    
//!    HX8347Init(18000000);
//!    HX8347LCDClear(White);
//!    STMPE811Init();
//!    //
//!    // Get STMPE811 device ID.
//!    //
//!    STMPE811Read(STMPE811_CHIP_ID,2,pucBuffer);
//!    ulDeviceID = (unsigned long)((pucBuffer[0] << 8)| pucBuffer[1]);
//!    
//!    //
//!    // Display STMPE811 device ID.
//!    //
//!    HX8347LCDClear(White);
//!    HX8347DisplayString(0, 0, "STMPE811 ID is:");
//!    HX8347DisplayN(0, 15, ulDeviceID);   
//!    
//!    while(1)
//!    {
//!        if(TouchDetect == xtrue)
//!        {
//!            ulPointX = ulY;
//!            ulPointY = ulX;
//!            HX8347ClearLine(1);
//!            HX8347DisplayString(1, 0, "X:");
//!            HX8347DisplayN(1, 2, ulPointX);
//!            HX8347ClearLine(2);
//!            HX8347DisplayString(2, 0, "Y:");      
//!            HX8347DisplayN(2, 2, ulPointY);
//!            TouchDetect = xfalse;
//!        }
//!    }
//!}
//!//!     
//!//! \endcode
//!//
//!//*****************************************************************************